!function(){function e(){console.log("\n--- Terms Acceptance Debug Info ---");const e=localStorage.getItem("patriotThanksSession");if(console.log("1. Session data exists:",!!e),e)try{const s=JSON.parse(e);if(console.log("2. Session parsed successfully:",!0),console.log("3. User exists in session:",!!s.user),s.user){console.log("4. User email:",s.user.email),console.log("5. User terms accepted:",s.user.termsAccepted),console.log("6. User terms version:",s.user.termsVersion),console.log("7. User terms accepted date:",s.user.termsAcceptedDate);const e="May 14, 2025";console.log("8. Current terms version:",e),console.log("9. Versions match:",s.user.termsVersion===e),console.log("10. Should show modal:",!s.user.termsAccepted||s.user.termsVersion!==e),console.log("\n--- Potential Issues ---"),void 0===s.user.termsAccepted&&console.log("⚠️  termsAccepted is undefined"),null===s.user.termsAccepted&&console.log("⚠️  termsAccepted is null"),void 0===s.user.termsVersion&&console.log("⚠️  termsVersion is undefined"),null===s.user.termsVersion&&console.log("⚠️  termsVersion is null"),void 0===s.user.termsAcceptedDate&&console.log("⚠️  termsAcceptedDate is undefined"),null===s.user.termsAcceptedDate&&console.log("⚠️  termsAcceptedDate is null")}}catch(e){console.error("Failed to parse session:",e)}console.log("--- End Debug Info ---\n")}console.log("=== TERMS ACCEPTANCE DEBUGGER ==="),window.TermsDebugger={debug:e,fix:function(){const s=localStorage.getItem("patriotThanksSession");if(s)try{const o=JSON.parse(s);if(o.user){let s=!1;void 0!==o.user.termsAccepted&&null!==o.user.termsAccepted||(console.log("Fixing undefined termsAccepted"),o.user.termsAccepted=!0,s=!0),o.user.termsVersion&&"May 14, 2025"===o.user.termsVersion||(console.log("Fixing termsVersion to current version"),o.user.termsVersion="May 14, 2025",o.user.termsAcceptedDate=(new Date).toISOString(),s=!0),s?(localStorage.setItem("patriotThanksSession",JSON.stringify(o)),console.log("✅ Session data fixed and saved"),e()):console.log("No fixes needed")}}catch(e){console.error("Error fixing session data:",e)}else console.log("No session data to fix")},setAccepted:function(){const s=localStorage.getItem("patriotThanksSession");if(s)try{const o=JSON.parse(s);o.user&&(o.user.termsAccepted=!0,o.user.termsVersion="May 14, 2025",o.user.termsAcceptedDate=(new Date).toISOString(),localStorage.setItem("patriotThanksSession",JSON.stringify(o)),console.log("✅ Terms acceptance manually set"),e())}catch(e){console.error("Error setting terms acceptance:",e)}else console.log("No session found - cannot set terms acceptance")},clearAccepted:function(){const s=localStorage.getItem("patriotThanksSession");if(s)try{const o=JSON.parse(s);o.user&&(o.user.termsAccepted=!1,o.user.termsVersion=void 0,o.user.termsAcceptedDate=void 0,localStorage.setItem("patriotThanksSession",JSON.stringify(o)),console.log("⚠️  Terms acceptance cleared (for testing)"),e())}catch(e){console.error("Error clearing terms acceptance:",e)}else console.log("No session found")}},setTimeout(e,1e3),console.log("=== TERMS DEBUGGER READY ==="),console.log("Available commands:"),console.log("- TermsDebugger.debug() - Show current terms status"),console.log("- TermsDebugger.fix() - Try to fix corrupted session data"),console.log("- TermsDebugger.setAccepted() - Manually set terms as accepted"),console.log("- TermsDebugger.clearAccepted() - Clear terms acceptance (for testing)"),console.log("================================")}();